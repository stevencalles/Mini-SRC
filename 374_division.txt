//There are some places where a logical shift was used and should not have been	



module Div(Q, M, Quo, R, Zero_div_error);

input [31:0] Q, M;
output [31:0] Quo, R;
output Zero_div_error;

reg [31:0] q;
reg [31:0]  A=32b'0;
integer i;

always@(Q or M) //add "Zero_div_error" if a reset signal is chosen and add it to the "or" statement
	begin
		if(M==0)
			begin
				Zero_div_error<=1; //a sysystem is needed to reset the error signal whether it is a delay or a reset signal

				Quo<=32b'0;		//incase we don't set up the error system, just to make it obvious something is wrong as there is a neg remainder
				R<=-1;
			end
		else
			begin
				Zero_div_error<=0;
				q=Q;
				A=Q;
				for(i = 0; i < 32; i = i + 1)
				begin
					A<=(A<<1)+Q[31]-M;
					q<=q<<1;
					if(A<0) begin
						A<=M+A;
					end
					else begin
						q<=q+1;
					end
					if(A<0) begin
						A<=A+M;
					end
				end
				Quo<=q;
				R<=A;
			end
	end
endmodule